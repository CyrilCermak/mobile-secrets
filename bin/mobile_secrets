#!/usr/bin/env ruby
require_relative '../lib/src/secrets_handler'
require "dotgpg"

module MobileSecrets
  class Cli

    def header
    "Mobile Secrets HELP:
    ##############################################################################################################################
    ##  %# #%%%( ##%  ,%%%  (%%/   *%%%% ,%%%/       .%%(  (%%,  #%%%#.(%%#   #%%*.#%%% ,%%%%%.%%%%.   #%%%%.#%%%.*%% %%%%*#%%  ##
    ##  %  #%%%(  % *%%%#  /%%%(  *%%%%  %%%%,      %%%*    %,  (%%%#   #( .%%%(    %%  (%%%#  %%%%    %%%%.  .%.*%  %%%%* #%   ##
    ##     #%%%(    %%%%#  /%%%%  *%%%%  %%%%.     .%%%%%%#.    (%%%( ,%   %%%%(    ,#  (%%%# .%%%%   .%%%%. (*  ,(  %%%%* .#   ##
    ##     #%%%(    %%%%#  /%%%%  /%%%% *%%%*       *%%%%%%%%   (%%%((%%   %%%%(        (%%%#.#%#,    .%%%%.%%*      %%%%,      ##
    ##     #%%%(    #%%%#  /%%%%  /%%%%            .(  (%%%%%#  (%%%( ,%   %%%%(        (%%%# *%%%#   .%%%%. #*      %%%%,      ##
    ##     %%%%(     %%%#  /%%%.  /%%%%            ,%,    %%%/  (%%%(   (# (%%%(    *#  #%%%# .%%%%   .%%%%    #,    %%%%,      ##
    ##    %%%%%%(     /%%**%%(   ,%%%%%(           ,%%#. /%%*   #%%%(./%%#  *%%#  .##   #%%%# .%%%%#/ .%%%%  ,%%,    %%%%,      ##
    ##############################################################################################################################"
    end

    def options
      opt = ""
      opt << "--init-gpg PATH \tInitialize GPG in the directory.\n"
      opt << "--create-template \tCreates a template yml file to configure the MobileSecrets\n"
      opt << "--import GPG_PATH SECRETS_PATH \tAdds MobileSecrets to GPG secrets\n"
      opt << "--export \tCreates source file with obfuscated secrets\n\n"
      opt << "Examples:\n"
      opt << "--import \".\" \"./secrets.gpg\"\n"
      opt << "--init-gpg \".\""
      opt
    end

    def perform_action command, argv_1, argv_2
      if command == "--create-template"
        return FileUtils.cp('../lib/resources/example.yml', "#{Dir.pwd}#{File::SEPARATOR}MobileSecrets.yml")
      elsif command == "--init-gpg" && argv_1 != nil then # path to the gpg
        return Dotgpg::Cli.new.init(argv_1)
      elsif command == "--import" && argv_1 && argv_2 then # path to gpg, path to the created secrets file
        dotgpg = Dotgpg::Dir.new(argv_1)
        file = IO.read argv_2
        return dotgpg.encrypt "./secrets.gpg", file
      elsif command == "--export"
        secrets_handler = MobileSecrets::SecretsHandler.new
        return secrets_handler.obfuscate_to_swift
      end

      puts "#{header}\n\n#{options}" #Wrong action selected
    end
  end
end

cmd, argv_1, argv_2 = ARGV[0], ARGV[1], ARGV[2]
MobileSecrets::Cli.new.perform_action cmd, argv_1, argv_2
